'use strict';

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _with_hoc_elements = require('./with_hoc_elements');

var _with_hoc_elements2 = _interopRequireDefault(_with_hoc_elements);

var _dom_elements = require('./dom_elements');

var _dom_elements2 = _interopRequireDefault(_dom_elements);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global it, expect, describe */


describe('withHocElements', function () {
  it('will export an function', function () {
    expect(_with_hoc_elements2.default).toBeInstanceOf(Function);
  });

  it('will add a method to the prototype for each element', function () {
    var SomeClass = function (_Component) {
      _inherits(SomeClass, _Component);

      function SomeClass() {
        _classCallCheck(this, SomeClass);

        return _possibleConstructorReturn(this, (SomeClass.__proto__ || Object.getPrototypeOf(SomeClass)).apply(this, arguments));
      }

      return SomeClass;
    }(_react.Component);

    SomeClass.propTypes = {};
    var Decorated = (0, _with_hoc_elements2.default)(SomeClass);
    _dom_elements2.default.forEach(function (e) {
      return expect(Decorated[e]).toBeDefined();
    });
  });

  it('will update the display name of the higher-order classes', function () {
    var SomeClass = function (_Component2) {
      _inherits(SomeClass, _Component2);

      function SomeClass() {
        _classCallCheck(this, SomeClass);

        return _possibleConstructorReturn(this, (SomeClass.__proto__ || Object.getPrototypeOf(SomeClass)).apply(this, arguments));
      }

      return SomeClass;
    }(_react.Component);

    SomeClass.propTypes = {};
    var Decorated = (0, _with_hoc_elements2.default)(SomeClass);
    _dom_elements2.default.forEach(function (e) {
      return expect(Decorated[e].displayName).toBe('SomeClass.' + e);
    });
  });

  describe('the wrapped component', function () {
    it('will set the `node` value on the wrapper', function () {
      var SomeClass = function (_Component3) {
        _inherits(SomeClass, _Component3);

        function SomeClass() {
          _classCallCheck(this, SomeClass);

          return _possibleConstructorReturn(this, (SomeClass.__proto__ || Object.getPrototypeOf(SomeClass)).apply(this, arguments));
        }

        return SomeClass;
      }(_react.Component);

      SomeClass.propTypes = {
        customProp: _propTypes2.default.string
      };
      var Decorated = (0, _with_hoc_elements2.default)(SomeClass);
      var decoratedInstance = new Decorated.div();
      decoratedInstance.props = {
        customProp: 'test',
        children: 'Text Child'
      };
      var el = decoratedInstance.render();
      expect(el.ref).toBeInstanceOf(Function);
      var fakeNode = {};
      // call the ref
      el.ref({ node: fakeNode });
      expect(decoratedInstance.node).toBe(fakeNode);
    });

    it('will split the target propTypes from the generated child', function () {
      var SomeClass = function (_Component4) {
        _inherits(SomeClass, _Component4);

        function SomeClass() {
          _classCallCheck(this, SomeClass);

          return _possibleConstructorReturn(this, (SomeClass.__proto__ || Object.getPrototypeOf(SomeClass)).apply(this, arguments));
        }

        return SomeClass;
      }(_react.Component);

      SomeClass.propTypes = {
        customProp: _propTypes2.default.string
      };
      var Decorated = (0, _with_hoc_elements2.default)(SomeClass);
      var decoratedInstance = new Decorated.div();
      decoratedInstance.props = {
        customProp: 'test',
        otherProp: 'something else'
      };
      var el = decoratedInstance.render();
      expect(el.props.customProp).toBe('test');
      expect(el.props.otherProp).not.toBeDefined();
      expect(el.props.children.props.customProp).not.toBeDefined();
      expect(el.props.children.props.otherProp).toBe('something else');
    });
  });
});